{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quick introduction\n",
    "\n",
    "erddapy is a pure python package and can be installed with conda\n",
    "\n",
    "```shell\n",
    "conda install --channel conda-forge erddapy\n",
    "```\n",
    "\n",
    "or pip\n",
    "\n",
    "```shell\n",
    "pip install erddapy\n",
    "```\n",
    "\n",
    "\n",
    "First we need to instantiate the ERDDAP URL constructor for a server.\n",
    "In these examples we will use\n",
    "[https://standards.sensors.ioos.us/erddap/index.html](https://standards.sensors.ioos.us/erddap/index.html) and [https://erddap.ioos.us/erddap/index.html](https://erddap.ioos.us/erddap/index.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-18T20:09:28.628897Z",
     "iopub.status.busy": "2024-09-18T20:09:28.628567Z",
     "iopub.status.idle": "2024-09-18T20:09:29.104185Z",
     "shell.execute_reply": "2024-09-18T20:09:29.103746Z"
    }
   },
   "outputs": [],
   "source": [
    "from erddapy import ERDDAP\n",
    "\n",
    "server = \"https://standards.sensors.ioos.us/erddap\"\n",
    "e = ERDDAP(\n",
    "    server=server,\n",
    "    protocol=\"tabledap\",\n",
    "    response=\"csv\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can populate the object a dataset id, variables of interest, and its\n",
    "constraints (last week gliders). Use the method `to_pandas` to download the\n",
    "csv(p) response, a comma separated values with units and explore the Dataframe.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-18T20:09:29.106019Z",
     "iopub.status.busy": "2024-09-18T20:09:29.105678Z",
     "iopub.status.idle": "2024-09-18T20:09:29.657669Z",
     "shell.execute_reply": "2024-09-18T20:09:29.657117Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude (degrees_north)</th>\n",
       "      <th>longitude (degrees_east)</th>\n",
       "      <th>sea_water_temperature (degree_Celsius)</th>\n",
       "      <th>air_temperature (degree_Celsius)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time (UTC)</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-01 00:08:00+00:00</th>\n",
       "      <td>32.8032</td>\n",
       "      <td>-79.6204</td>\n",
       "      <td>14.01</td>\n",
       "      <td>14.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-01 01:08:00+00:00</th>\n",
       "      <td>32.8032</td>\n",
       "      <td>-79.6204</td>\n",
       "      <td>13.92</td>\n",
       "      <td>13.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-01 02:08:00+00:00</th>\n",
       "      <td>32.8032</td>\n",
       "      <td>-79.6204</td>\n",
       "      <td>13.90</td>\n",
       "      <td>13.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-01 03:08:00+00:00</th>\n",
       "      <td>32.8032</td>\n",
       "      <td>-79.6204</td>\n",
       "      <td>13.92</td>\n",
       "      <td>13.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-01 04:08:00+00:00</th>\n",
       "      <td>32.8032</td>\n",
       "      <td>-79.6204</td>\n",
       "      <td>13.93</td>\n",
       "      <td>13.28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           latitude (degrees_north)  longitude (degrees_east)  \\\n",
       "time (UTC)                                                                      \n",
       "2000-01-01 00:08:00+00:00                   32.8032                  -79.6204   \n",
       "2000-01-01 01:08:00+00:00                   32.8032                  -79.6204   \n",
       "2000-01-01 02:08:00+00:00                   32.8032                  -79.6204   \n",
       "2000-01-01 03:08:00+00:00                   32.8032                  -79.6204   \n",
       "2000-01-01 04:08:00+00:00                   32.8032                  -79.6204   \n",
       "\n",
       "                           sea_water_temperature (degree_Celsius)  \\\n",
       "time (UTC)                                                          \n",
       "2000-01-01 00:08:00+00:00                                   14.01   \n",
       "2000-01-01 01:08:00+00:00                                   13.92   \n",
       "2000-01-01 02:08:00+00:00                                   13.90   \n",
       "2000-01-01 03:08:00+00:00                                   13.92   \n",
       "2000-01-01 04:08:00+00:00                                   13.93   \n",
       "\n",
       "                           air_temperature (degree_Celsius)  \n",
       "time (UTC)                                                   \n",
       "2000-01-01 00:08:00+00:00                             14.42  \n",
       "2000-01-01 01:08:00+00:00                             13.91  \n",
       "2000-01-01 02:08:00+00:00                             13.60  \n",
       "2000-01-01 03:08:00+00:00                             13.47  \n",
       "2000-01-01 04:08:00+00:00                             13.28  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e.dataset_id = \"org_cormp_cap2\"\n",
    "\n",
    "e.variables = [\n",
    "    \"time\",\n",
    "    \"latitude\",\n",
    "    \"longitude\",\n",
    "    \"sea_water_temperature\",\n",
    "    \"air_temperature\",\n",
    "]\n",
    "\n",
    "e.constraints = {\n",
    "    \"time>=\": \"2000-01-01\",\n",
    "}\n",
    "\n",
    "\n",
    "df = e.to_pandas(\n",
    "    index_col=\"time (UTC)\",\n",
    "    parse_dates=True,\n",
    ").dropna()\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can constraint the in time and space with relative constraints like in the\n",
    "example below. For more ways to access the data please check the \"Longer\n",
    "introduction.\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-18T20:09:29.684355Z",
     "iopub.status.busy": "2024-09-18T20:09:29.683977Z",
     "iopub.status.idle": "2024-09-18T20:09:29.687544Z",
     "shell.execute_reply": "2024-09-18T20:09:29.687051Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://erddap.ioos.us/erddap/tabledap/processed_asset_inventory.htmlTable?&longitude<=min(longitude)+10&longitude>=min(longitude)&latitude<=min(latitude)+10&latitude>=min(latitude)\n"
     ]
    }
   ],
   "source": [
    "server = \"https://erddap.ioos.us/erddap\"\n",
    "e = ERDDAP(\n",
    "    server=server,\n",
    "    protocol=\"tabledap\",\n",
    "    response=\"csv\",\n",
    ")\n",
    "\n",
    "e.dataset_id = \"processed_asset_inventory\"\n",
    "\n",
    "# Get the box of the first 10 degrees bbox.\n",
    "constraints = {\n",
    "    \"longitude<=\": \"min(longitude)+10\",\n",
    "    \"longitude>=\": \"min(longitude)\",\n",
    "    \"latitude<=\": \"min(latitude)+10\",\n",
    "    \"latitude>=\": \"min(latitude)\",\n",
    "}\n",
    "\n",
    "\n",
    "url = e.get_download_url(\n",
    "    response=\"htmlTable\",\n",
    "    constraints=constraints,\n",
    ")\n",
    "\n",
    "print(url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can search all datasets with a set of constraints by setting `dataset_id` to `\"allDatasets\"`. Note that these variables are different than the ones available at the individual dataset level. For a reference of the possible variables to query all datasets see the `<server-url>/erddap/<protocol>/allDatasets.html` page, like [this one](https://erddap.ifremer.fr/erddap/tabledap/allDatasets.html) for the Ifremer ERDDAP server."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-18T20:09:29.689228Z",
     "iopub.status.busy": "2024-09-18T20:09:29.688677Z",
     "iopub.status.idle": "2024-09-18T20:09:29.762439Z",
     "shell.execute_reply": "2024-09-18T20:09:29.762036Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://erddap.ioos.us/erddap/tabledap/allDatasets.html?datasetID,institution\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>institution</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datasetID</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>allDatasets</th>\n",
       "      <td>Integrated Ocean Observing System (IOOS)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OBIS</th>\n",
       "      <td>???</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ra_regional_boundaries</th>\n",
       "      <td>NOAA/NOS/IOOS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>by_the_numbers</th>\n",
       "      <td>IOOS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>processed_asset_inventory</th>\n",
       "      <td>NOAA/NOS/IOOS</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                        institution\n",
       "datasetID                                                          \n",
       "allDatasets                Integrated Ocean Observing System (IOOS)\n",
       "OBIS                                                            ???\n",
       "ra_regional_boundaries                                NOAA/NOS/IOOS\n",
       "by_the_numbers                                                 IOOS\n",
       "processed_asset_inventory                             NOAA/NOS/IOOS"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e.dataset_id = \"allDatasets\"\n",
    "\n",
    "e.variables = [\n",
    "    \"datasetID\",\n",
    "    \"institution\",\n",
    "]\n",
    "\n",
    "\n",
    "url = e.get_download_url(response=\"html\")\n",
    "print(url)\n",
    "\n",
    "df = e.to_pandas(\n",
    "    index_col=\"datasetID\",\n",
    ").dropna()\n",
    "\n",
    "\n",
    "df.head()"
   ]
  }
 ],
 "metadata": {
  "_draft": {
   "nbviewer_url": "https://gist.github.com/7e5eab16282538d11fdab7de5bd0c474"
  },
  "gist": {
   "data": {
    "description": "ERDDAP_advanced_glider_search.ipynb",
    "public": true
   },
   "id": "7e5eab16282538d11fdab7de5bd0c474"
  },
  "gist_id": "3f0f25b13ade0c64c84607bd92903d1b",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
